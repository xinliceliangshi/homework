/*高次幂函数取模算法
在平常的工作学习中，我们经常需要用到求取一个数字或者幂运算的余数，尤其在密码学中最为常用的RSA算法就经常要用到这种运算，我们称之为高次幂函数的取模运算。

在本篇文章中，将会首先介绍运用程序求解高次幂函数取模的暴力求解方法，然后针对暴力方法算法效率低下的缺点，给出一种快速的取模算法。
*/
/*暴力取模算法
由于我们的高次幂函数往往拥有很高的幂，而我们在计算机中只有int、float、double、long long这几种变量类型，远远不能满足我们对于大数字运算的要求，从而导致数据溢出无法完成运算。
所以这里我们需要在每次迭代取模的过程中进行取模运算，从而保证数据不会溢出。代码如下：
*/
int get_mod(int a, int b, int c)
{
    long long result = 1;//声明为long long类型防止溢出
    while(b--)
    {
        result = result * a % c;//这个算法的核心就是在迭代运算过程中进行取模运算
    }
    return static_cast<int> (result);
}
